@page "/analytics"
@inject TransactionService TransactionService

<div class="analytics-page">
    <div class="filter-container">
        <div class="filter-group">
            <div class="filter-row">
                <div class="filter-item">
                    <label>Početni datum</label>
                    <InputDate class="input" @bind-Value="startDate" />
                </div>
                <div class="filter-item">
                    <label>Krajnji datum</label>
                    <InputDate class="input" @bind-Value="endDate" />
                </div>
            </div>

            <div class="filter-row">
                <div class="filter-item">
                    <label>Minimalni iznos</label>
                    <InputNumber class="input" @bind-Value="minAmount" />
                </div>
                <div class="filter-item">
                    <label>Maksimalni iznos</label>
                    <InputNumber class="input" @bind-Value="maxAmount" />
                </div>
            </div>

            <div class="filter-row">
                <div class="filter-item">
                    <label>Kategorije</label>
                    <div class="category-selector">
                        @foreach (var cat in categories)
                        {
                            <div class="category-checkbox">
                                <input class="checkbox" type="checkbox" id="cat-@cat.Id"
                                       @onchange="@(e => ToggleCategory(cat.Name, (bool)e.Value))" />
                                <label for="cat-@cat.Id" style="color:@cat.ColorHex">@cat.Name</label>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="filter-row">
                <div class="filter-item">
                    <label>Tip transakcije</label>
                    <select class="input" @bind="selectedType">
                        <option value="">Sve transakcije</option>
                        <option value="@TransactionType.Income">Prihodi</option>
                        <option value="@TransactionType.Expense">Rashodi</option>
                    </select>
                </div>
            </div>

            <div class="filter-actions">
                <button class="btn btn-primary" @onclick="ApplyFilters">
                    <img src="Images/search.svg" alt="Search" class="icon" /> Primeni filtere
                </button>
                <button class="btn btn-secondary" @onclick="ResetFilters">
                    <img src="Images/refresh.svg" alt="Reset" class="icon" /> Resetuj filtere
                </button>
            </div>
        </div>
    </div>

    <div class="results-container">
        @if (!filteredTransactions.Any())
        {
            <p>Nema pronađenih transakcija prema zadatim filterima.</p>
        }
        else
        {
            <ul class="transaction-list">
                @foreach (var t in filteredTransactions)
                {
                    <li class="transaction-item @(t.Type == TransactionType.Income ? "income" : "expense")">
                        <div class="transaction-header">
                            <h3 class="transaction-title">@t.Name</h3>
                            <div class="transaction-amount @(t.Type == TransactionType.Income ? "income" : "expense")">
                                @(t.Type == TransactionType.Income ? "+" : "-")@t.Amount RSD
                            </div>
                        </div>

                        <div class="transaction-details">
                            @{
                                var categoryColor = categories.FirstOrDefault(c => c.Name == t.Category)?.ColorHex ?? "#000000";
                            }

                            <div>
                                Kategorija: <span style="color:@categoryColor">@t.Category</span>
                            </div>

                            @if (!string.IsNullOrWhiteSpace(t.Note))
                            {
                                <div>Napomena: @t.Note</div>
                            }
                        </div>

                        <div class="transaction-footer">
                            <div class="transaction-date">@t.Date.ToShortDateString()</div>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    // Filter variables
    private DateTime? startDate = DateTime.Now.AddMonths(-1);
    private DateTime? endDate = DateTime.Now;
    private decimal? minAmount;
    private decimal? maxAmount;
    private List<string> selectedCategories = new();
    private string selectedType = "";

    // Data
    private List<Transaction> allTransactions = new();
    private List<Transaction> filteredTransactions = new();
    private List<Category> categories = new();

    protected override async Task OnInitializedAsync()
    {
        // Load initial data
        allTransactions = await TransactionService.GetTransactions();
        categories = await TransactionService.GetCategories();

        // Apply initial filters
        ApplyFilters();
    }

    private void ToggleCategory(string categoryName, bool isChecked)
    {
        if (isChecked && !selectedCategories.Contains(categoryName))
        {
            selectedCategories.Add(categoryName);
        }
        else if (!isChecked && selectedCategories.Contains(categoryName))
        {
            selectedCategories.Remove(categoryName);
        }
    }

    private void ApplyFilters()
    {
        filteredTransactions = allTransactions.Where(t =>
        {
            // Date filter
            bool dateFilter = true;
            if (startDate.HasValue)
            {
                dateFilter = t.Date >= startDate.Value;
            }
            if (dateFilter && endDate.HasValue)
            {
                dateFilter = t.Date <= endDate.Value;
            }

            // Amount filter
            bool amountFilter = true;
            if (minAmount.HasValue)
            {
                amountFilter = t.Amount >= minAmount.Value;
            }
            if (amountFilter && maxAmount.HasValue)
            {
                amountFilter = t.Amount <= maxAmount.Value;
            }

            // Category filter
            bool categoryFilter = true;
            if (selectedCategories.Any())
            {
                categoryFilter = selectedCategories.Contains(t.Category);
            }

            // Type filter
            bool typeFilter = true;
            if (!string.IsNullOrEmpty(selectedType))
            {
                TransactionType parsedType;
                if (Enum.TryParse<TransactionType>(selectedType, out parsedType))
                {
                    typeFilter = t.Type == parsedType;
                }
            }

            return dateFilter && amountFilter && categoryFilter && typeFilter;
        }).ToList();
    }

    private void ResetFilters()
    {
        startDate = DateTime.Now.AddMonths(-1);
        endDate = DateTime.Now;
        minAmount = null;
        maxAmount = null;
        selectedCategories.Clear();
        selectedType = "";

        // Reapply filters
        ApplyFilters();
    }
}