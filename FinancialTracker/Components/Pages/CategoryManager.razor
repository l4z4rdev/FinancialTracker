@page "/categories"
@using FinancialTracker.Models
@using FinancialTracker.Services
@inject NavigationManager Navigation
@inject TransactionService TransactionService

<h2>Kategorije</h2>

<EditForm Model="newCategory" OnValidSubmit="AddCategory">
    <div class="space-x-2 mb-4">
        <InputText @bind-Value="newCategory.Name" class="input" placeholder="Nova kategorija" />
        <input type="color" @bind="newCategory.ColorHex" />
        <button class="btn btn-primary">➕ Dodaj</button>
    </div>
</EditForm>

@if (categories == null)
{
    <p>Učitavanje...</p>
}
else if (!categories.Any())
{
    <p>Nema unetih kategorija.</p>
}
else
{
    <p class="mb-2">Unete kategorije:</p>

    <ul class="category-list">
        @foreach (var cat in categories)
        {
            <li class="category-item">
                <InputText @bind-Value="cat.Name" class="input flex-1 mr-2 mb-0" />
                <input type="color" @bind="cat.ColorHex" />
                <div class="space-x-2">
                    <button @onclick="() => UpdateCategory(cat)" class="btn btn-secondary btn-sm">💾</button>
                    <button @onclick="() => ConfirmDeleteCategory(cat)" class="btn btn-danger btn-sm">🗑️</button>
                </div>
            </li>
        }
    </ul>
}

@if (showDeleteCategoryConfirmation)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header">
                <h3>Potvrda brisanja kategorije</h3>
            </div>
            <div class="modal-body">
                <p>Da li ste sigurni da želite da obrišete kategoriju: <strong>@selectedCategory?.Name</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CancelDeleteCategory">Otkaži</button>
                <button class="btn btn-danger" @onclick="DeleteCategory">Obriši</button>
            </div>
        </div>
    </div>
}

@code {
    private Category newCategory = new();
    private List<Category> categories = new();
    private bool showDeleteCategoryConfirmation = false;
    private Category selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        categories = await TransactionService.GetCategories();
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory.Name))
        {
            await TransactionService.AddCategory(newCategory);
            newCategory = new();
            categories = await TransactionService.GetCategories();
        }
    }

    private async Task DeleteCategory()
    {
        await TransactionService.DeleteCategory(selectedCategory.Id);
        categories = await TransactionService.GetCategories();
        showDeleteCategoryConfirmation = false;
    }

    private async Task UpdateCategory(Category category)
    {
        if (!string.IsNullOrWhiteSpace(category.Name))
        {
            await TransactionService.UpdateCategory(category);
        }
    }

    private void ConfirmDeleteCategory(Category category)
    {
        selectedCategory = category;
        showDeleteCategoryConfirmation = true;
    }

    private void CancelDeleteCategory()
    {
        showDeleteCategoryConfirmation = false;
    }
}
