@page "/"
@using FinancialTracker.Models
@using FinancialTracker.Services
@inject TransactionService TransactionService

<div class="transaction-page">
    <div class="stats-container">
        <div class="stats-row">
            <div class="stat-card income-card">
                <div class="stat-label">Ukupni Prihodi</div>
                <div class="stat-value income-value">@TotalIncome RSD</div>
            </div>

            <div class="stat-card expense-card">
                <div class="stat-label">Ukupni Rashodi</div>
                <div class="stat-value expense-value">@TotalExpense RSD</div>
            </div>
        </div>
        <div class="stat-card balance-card">
            <div class="stat-label">Balans</div>
            <div class="stat-value balance-value">@Balance RSD</div>
        </div>
    </div>

    <h2>Sve Transakcije</h2>

    <div class="buttons-row">
        <button class="btn btn-primary" @onclick="OpenAddTransactionDialog">
            <img src="Images/add.svg" alt="Add" class="icon" />
			Dodaj transakciju
        </button>

        <button class="btn btn-secondary" @onclick="async () => await RefreshTransactions()">
            <img src="Images/refresh.svg" alt="Refresh" class="icon" />
			Osveži
        </button>
    </div>

    @if (!string.IsNullOrEmpty(warningMessage))
    {
        <div class="validation-message">@warningMessage</div>
    }

    @if (transactions == null)
    {
        <p>Učitavanje...</p>
    }
    else if (!transactions.Any())
    {
        <p>Nema unetih transakcija.</p>
    }
    else
    {
        <ul class="transaction-list">
            @foreach (var t in transactions)
            {
                <li class="transaction-item @(t.Type == TransactionType.Income ? "income" : "expense")">
                    <div class="transaction-header">
                        <h3 class="transaction-title">@t.Name</h3>
                        <div class="transaction-amount @(t.Type == TransactionType.Income ? "income" : "expense")">
                            @(t.Type == TransactionType.Income ? "+" : "-")@t.Amount RSD
                        </div>
                    </div>

                    <div class="transaction-details">
                        @{
                            var categoryColor = categories.FirstOrDefault(c => c.Name == t.Category)?.ColorHex ?? "#000000";
                        }

                        <div>
                            Kategorija: <span style="color:@categoryColor">@t.Category</span>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(t.Note))
                        {
                            <div>Napomena: @t.Note</div>
                        }
                    </div>

                    <div class="transaction-footer">
                        <div class="transaction-date">@t.Date.ToShortDateString()</div>
                        <div class="transaction-actions">
                            <button class="btn btn-primary btn-sm" @onclick="() => OpenEditTransactionDialog(t)">
                                <img src="Images/edit.svg" alt="Edit" class="icon" />
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteTransaction(t)">
                                <img src="Images/delete.svg" alt="Delete" class="icon" />
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    }

    @if (showAddTransactionDialog)
    {
        <div class="modal-overlay">
            <div class="modal-container">
                <div class="modal-header">
                    <h3>Nova transakcija</h3>
                    <img src="Images/cancel.svg" alt="Cancel" class="icon" @onclick="CloseAddTransactionDialog" />
                </div>
                <div class="modal-body">
                    <EditForm Model="newTransaction" OnValidSubmit="ValidateAndSaveTransaction">
                        <DataAnnotationsValidator />
                        <div class="form-row front-row">
                            <div class="form-group">
                                <label>Naziv</label>
                                <InputText class="input" @bind-Value="newTransaction.Name" />
                                <ValidationMessage For="@(() => newTransaction.Name)" />
                            </div>
                            <div class="form-group">
                                <label>Iznos</label>
                                <InputNumber class="input" @bind-Value="newTransaction.Amount" />
                                <ValidationMessage For="@(() => newTransaction.Amount)" />
                            </div>
                        </div>
                        <div class="form-row front-row">
                            <div class="form-group">
                                <label>Kategorija</label>
                                <InputSelect class="input" @bind-Value="newTransaction.Category">
                                    <option value="">Odaberite</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Name">@category.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newTransaction.Category)" />
                            </div>
                            <div class="form-group">
                                <label>Tip</label>
                                <InputSelect class="input" @bind-Value="newTransaction.Type">
                                    <option value="@TransactionType.Income">Prihod</option>
                                    <option value="@TransactionType.Expense">Rashod</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => newTransaction.Type)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Datum</label>
                            <InputDate class="input" @bind-Value="newTransaction.Date" />
                            <ValidationMessage For="@(() => newTransaction.Date)" />
                        </div>
                        <div class="form-group">
                            <label>Napomena (opciono)</label>
                            <InputText class="input" @bind-Value="newTransaction.Note" />
                            <ValidationMessage For="@(() => newTransaction.Note)" />
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">
                                <img src="Images/save.svg" alt="Save" class="icon" />
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    @if (showEditTransactionDialog)
    {
        <div class="modal-overlay">
            <div class="modal-container">
                <div class="modal-header">
                    <h3>Izmena transakcije</h3>
                    <img src="Images/cancel.svg" alt="Cancel" class="icon" @onclick="CloseEditTransactionDialog" />
                </div>
                <div class="modal-body">
                    <EditForm Model="editTransaction" OnValidSubmit="ValidateAndUpdateTransaction">
                        <DataAnnotationsValidator />

                        <div class="form-row front-row">
                            <div class="form-group">
                                <label>Naziv</label>
                                <InputText class="input" @bind-Value="editTransaction.Name" />
                                <ValidationMessage For="@(() => editTransaction.Name)" />
                            </div>
                            <div class="form-group">
                                <label>Iznos</label>
                                <InputNumber class="input" @bind-Value="editTransaction.Amount" />
                                <ValidationMessage For="@(() => editTransaction.Amount)" />
                            </div>
                        </div>

                        <div class="form-row front-row">
                            <div class="form-group">
                                <label>Kategorija</label>
                                <InputSelect class="input" @bind-Value="editTransaction.Category">
                                    <option value="">Odaberite</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Name">@category.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => editTransaction.Category)" />
                            </div>
                            <div class="form-group">
                                <label>Tip</label>
                                <InputSelect class="input" @bind-Value="editTransaction.Type">
                                    <option value="@TransactionType.Income">Prihod</option>
                                    <option value="@TransactionType.Expense">Rashod</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => editTransaction.Type)" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label>Datum</label>
                            <InputDate class="input" @bind-Value="editTransaction.Date" />
                            <ValidationMessage For="@(() => editTransaction.Date)" />
                        </div>

                        <div class="form-group">
                            <label>Napomena (opciono)</label>
                            <InputText class="input" @bind-Value="editTransaction.Note" />
                            <ValidationMessage For="@(() => editTransaction.Note)" />
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">
                                <img src="Images/save.svg" alt="Save" class="icon" />
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    @if (showDeleteTransactionConfirmation)
    {
        <div class="modal-overlay">
            <div class="modal-container">
                <div class="modal-header">
                    <h3>Potvrda brisanja transakcije</h3>
					<img src="Images/cancel.svg" alt="Cancel" class="icon" @onclick="CancelDeleteTransaction" />
                </div>
                <div class="modal-body">
                    <p>Da li ste sigurni da želite da obrišete transakciju: <strong>@selectedTransaction?.Name</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteTransaction">Obriši</button>
                </div>
            </div>
        </div>
    }

    @if (showDailyLimitWarning)
    {
        <div class="modal-overlay">
            <div class="modal-container">
                <div class="modal-header">
                    <h3>
                        <img src="Images/warning.svg" alt="Warning" class="icon" />
                        Upozorenje o dnevnom limitu
                    </h3>
                </div>
                <div class="modal-body">
                    <p>Ova transakcija će prekoračiti vaš dnevni limit za rashode!</p>
                    <div class="limit-info">
                        <div>Trenutna potrošnja (24h): <strong>@dailyExpenseTotal.ToString("F2") RSD</strong></div>
                        <div>Dnevni limit: <strong>@dailyLimitAmount.ToString("F2") RSD</strong></div>
                    </div>
                    <p>Da li želite da nastavite sa dodavanjem transakcije?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelLimitWarning">Odustani</button>
                    <button class="btn btn-primary" @onclick="ConfirmDespiteLimit">Nastavi</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Transaction> transactions;
    private List<Category> categories = new();
    private bool showDeleteTransactionConfirmation = false;
    private Transaction selectedTransaction;

    private string warningMessage;

    // Dialog control
    private bool showAddTransactionDialog = false;
    private bool showEditTransactionDialog = false;
    private bool showDailyLimitWarning = false;
    private decimal dailyExpenseTotal = 0;
    private decimal dailyLimitAmount = 0;
    private bool isAddingNewTransaction = true;

    // Form data
    private Transaction newTransaction = new Transaction() { Date = DateTime.Now };
    private Transaction editTransaction = new Transaction();

    private decimal TotalIncome => transactions?.Where(t => t.Type == TransactionType.Income).Sum(t => t.Amount) ?? 0;
    private decimal TotalExpense => transactions?.Where(t => t.Type == TransactionType.Expense).Sum(t => t.Amount) ?? 0;
    private decimal Balance => TotalIncome - TotalExpense;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetTransactions();
        categories = await TransactionService.GetCategories();
    }

    private async Task ConfirmDeleteTransaction(Transaction transaction)
    {
        selectedTransaction = transaction;
        showDeleteTransactionConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        showDeleteTransactionConfirmation = false;
    }

    private async Task DeleteTransaction()
    {
        if (selectedTransaction != null)
        {
            await TransactionService.DeleteTransaction(selectedTransaction.Id);
            transactions = await TransactionService.GetTransactions();
            showDeleteTransactionConfirmation = false;
        }
    }

    private async Task DeleteAllTransactions()
    {
        await TransactionService.DeleteAllTransactions();
        transactions = await TransactionService.GetTransactions();
    }

    private async Task RefreshTransactions()
    {
        transactions = await TransactionService.GetTransactions();
    }

    private void OpenAddTransactionDialog()
    {
        if (categories == null || !categories.Any())
        {
            warningMessage = "Ne možete dodati transakciju jer nema dostupnih kategorija.";
            return;
        }

        warningMessage = null;
        newTransaction = new Transaction() { Date = DateTime.Now };
        showAddTransactionDialog = true;
    }

    private void CloseAddTransactionDialog()
    {
        showAddTransactionDialog = false;
    }

    // Provera dnevnog limita pre čuvanja
    private async Task ValidateAndSaveTransaction()
    {
        isAddingNewTransaction = true;
        var limitResult = await TransactionService.CheckDailyLimitExceeded(newTransaction);
        
        if (limitResult.IsOverLimit)
        {
            dailyExpenseTotal = limitResult.DailyTotal;
            dailyLimitAmount = limitResult.Limit;
            showDailyLimitWarning = true;
            showAddTransactionDialog = false;
        }
        else
        {
            await SaveNewTransaction();
        }
    }

    private async Task SaveNewTransaction()
    {
        await TransactionService.AddTransaction(newTransaction);
        await LoadTransactions();
        showAddTransactionDialog = false;
    }

    // Edit Transaction Dialog
    private void OpenEditTransactionDialog(Transaction transaction)
    {
        editTransaction = new Transaction
            {
                Id = transaction.Id,
                Name = transaction.Name,
                Amount = transaction.Amount,
                Category = transaction.Category,
                Date = transaction.Date,
                Note = transaction.Note,
                Type = transaction.Type
            };
        showEditTransactionDialog = true;
    }

    private void CloseEditTransactionDialog()
    {
        showEditTransactionDialog = false;
    }

    // Provera dnevnog limita pre ažuriranja
    private async Task ValidateAndUpdateTransaction()
    {
        isAddingNewTransaction = false;
        var limitResult = await TransactionService.CheckDailyLimitExceeded(editTransaction);
        
        if (limitResult.IsOverLimit)
        {
            dailyExpenseTotal = limitResult.DailyTotal;
            dailyLimitAmount = limitResult.Limit;
            showDailyLimitWarning = true;
            showEditTransactionDialog = false;
        }
        else
        {
            await UpdateTransaction();
        }
    }

    private async Task UpdateTransaction()
    {
        await TransactionService.UpdateTransaction(editTransaction);
        await LoadTransactions();
        showEditTransactionDialog = false;
    }

    private void CancelLimitWarning()
    {
        showDailyLimitWarning = false;
        if (isAddingNewTransaction)
        {
            showAddTransactionDialog = true;
        }
        else
        {
            showEditTransactionDialog = true;
        }
    }

    private async Task ConfirmDespiteLimit()
    {
        showDailyLimitWarning = false;
        
        if (isAddingNewTransaction)
        {
            await SaveNewTransaction();
        }
        else
        {
            await UpdateTransaction();
        }
    }

    private async Task LoadTransactions()
    {
        transactions = await TransactionService.GetTransactions();
    }
}