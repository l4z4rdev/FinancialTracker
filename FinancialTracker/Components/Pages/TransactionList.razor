@page "/"
@using FinancialTracker.Services
@using FinancialTracker.Models
@inject TransactionService TransactionService

<div class="stats-container">
    <div class="stats-row">
        <div class="stat-card income-card">
            <div class="stat-label">Ukupni Prihodi</div>
            <div class="stat-value income-value">@TotalIncome.ToString("0.00") RSD</div>
        </div>

        <div class="stat-card expense-card">
            <div class="stat-label">Ukupni Rashodi</div>
            <div class="stat-value expense-value">@TotalExpense.ToString("0.00") RSD</div>
        </div>
    </div>
    <div class="stat-card balance-card">
        <div class="stat-label">Balans</div>
        <div class="stat-value balance-value">@Balance.ToString("0.00") RSD</div>
    </div>
</div>

<h2>Sve Transakcije</h2>

<div class="buttons-row">
    <NavLink href="/add">
        <button class="btn btn-primary">
            ➕ Dodaj Transakciju
        </button>
    </NavLink>

    <button class="btn btn-secondary" @onclick="async () => await RefreshTransactions()">
        🔄 Osveži
    </button>
</div>

@if (transactions == null)
{
    <p>Učitavanje...</p>
}
else if (!transactions.Any())
{
    <p>Nema unetih transakcija.</p>
}
else
{
    <ul class="transaction-list">
        @foreach (var t in transactions)
        {
            <li class="transaction-item @(t.Type == TransactionType.Income ? "income" : "expense")">
                <div class="transaction-header">
                    <h3 class="transaction-title">@t.Name</h3>
                    <div class="transaction-amount @(t.Type == TransactionType.Income ? "income" : "expense")">
                        @(t.Type == TransactionType.Income ? "+" : "-")@t.Amount.ToString("0.00") RSD
                    </div>
                </div>

                <div class="transaction-details">
                    @{
                        var categoryColor = categories.FirstOrDefault(c => c.Name == t.Category)?.ColorHex ?? "#000000";
                    }

                    <div>
                        Kategorija: <span style="color:@categoryColor">@t.Category</span>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(t.Note))
                    {
                        <div>Napomena: @t.Note</div>
                    }
                </div>

                <div class="transaction-footer">
                    <div class="transaction-date">@t.Date.ToShortDateString()</div>
                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteTransaction(t)">
                        🗑️ Obriši
                    </button>
                </div>
            </li>
        }
    </ul>
}

@if (showDeleteTransactionConfirmation)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header">
                <h3>Potvrda brisanja transakcije</h3>
            </div>
            <div class="modal-body">
                <p>Da li ste sigurni da želite da obrišete transakciju: <strong>@selectedTransaction?.Name</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CancelDeleteTransaction">Otkaži</button>
                <button class="btn btn-danger" @onclick="DeleteTransaction">Obriši</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Transaction> transactions;
    private List<Category> categories = new();
    private bool showDeleteTransactionConfirmation = false;
    private Transaction selectedTransaction;

    private decimal TotalIncome => transactions?.Where(t => t.Type == TransactionType.Income).Sum(t => t.Amount) ?? 0;
    private decimal TotalExpense => transactions?.Where(t => t.Type == TransactionType.Expense).Sum(t => t.Amount) ?? 0;
    private decimal Balance => TotalIncome - TotalExpense;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetTransactions();
        categories = await TransactionService.GetCategories();
    }

    private async Task ConfirmDeleteTransaction(Transaction transaction)
    {
        selectedTransaction = transaction;
        showDeleteTransactionConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        showDeleteTransactionConfirmation = false;
    }

    private async Task DeleteTransaction()
    {
        if (selectedTransaction != null)
        {
            await TransactionService.DeleteTransaction(selectedTransaction.Id);
            transactions = await TransactionService.GetTransactions();
            showDeleteTransactionConfirmation = false;
        }
    }

    private async Task DeleteAllTransactions()
    {
        await TransactionService.DeleteAllTransactions();
        transactions = await TransactionService.GetTransactions();
    }

    private async Task RefreshTransactions()
    {
        transactions = await TransactionService.GetTransactions();
    }
}
